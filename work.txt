


gwt interview practice

Event Handler Interfaces


Create Custom Widget with Composite Class

 implements EntryPoint
 
 https://www.tutorialspoint.com/gwt/gwt_custom_widget.htm




class Node:
    pass


root = Node()
root.data = 1
root.left = Node()
root.right = Node()

root.left.data = 2
root.left.left = Node()
root.left.right = Node()

root.right.data = 3
root.right.left = Node()
root.right.right = Node()

node2 = root.left
node2.left.data = 4
node2.right.data = 5

node3 = root.right
node3.left.data = 6
node3.right.data = 7

queue = []

def printTree(rootNode, queue):
    if rootNode.data is not None:
        print(rootNode.data)

    if len(queue) > 0:
        t = queue[len(queue)-1]
        queue.remove([len(queue)-1])
        printTree(t, queue)

    if rootNode is not None and hasattr(rootNode, "left"):
        queue.append(rootNode.right)
        printTree(rootNode.left, queue)





printTree(root)

# print(root.data)



from os import listdir
from os.path import isfile, join
import re

mypath = "C:/Users/rathomoh/temp/site"
files = [f for f in listdir(mypath) if isfile(join(mypath, f))]
dirs = [f for f in listdir(mypath) if not isfile(join(mypath, f))]

print(files)
print(dirs)


redirectPageTemplate = open(mypath + '/' + "templateSitemap.html", 'r').read()

print(redirectPageTemplate % ("blog1", "blog1"))

for file in files:
    with open(mypath + '/' + file, 'r') as content_file:

        try:
            content = content_file.read()
            # print(content)
            pattern = '\/#(.*)"'
            # print(content)
            m = re.findall(pattern, content)
            print(m)



        except:
            print("can not read file ", file)



=================


from os import listdir
from os.path import isfile, join
import re

mypath = "C:/Users/rathomoh/temp/site"
files = [f for f in listdir(mypath) if isfile(join(mypath, f))]
dirs = [f for f in listdir(mypath) if not isfile(join(mypath, f))]

print(files)
print(dirs)


redirectPageTemplate = open(mypath + '/' + "templateSitemap.html", 'r').read()

def processFiles(currentPath , inputFiles):

    for file in inputFiles:
        with open(currentPath + '/' + file, 'r') as content_file:
            if not content_file.name.endswith('html'):
                continue
            try:
                content = content_file.read()
                pattern = '\/#(.*)"'
                ngUrlMatches = re.findall(pattern, content)

                for ngUrl in ngUrlMatches:
                    outTemplate = redirectPageTemplate % (ngUrl, ngUrl)
                    print(outTemplate)
                    print("--------------------------------")
                    file = open(mypath + '/nav/' + ngUrl + '.html', 'w+')
                    file.write(outTemplate)
                    file.close()

            except Exception as e:
                print(e)


def getFilesOfDirs(currentDir, inputDirs):

    for dir in inputDirs:
        if dir == 'nav':
            continue
        files = [f for f in listdir(currentDir + '/' + dir) if isfile(join(currentDir + '/' + dir, f))]
        processFiles(currentDir + '/' + dir, files)
        # getFilesOfDirs()

processFiles(mypath, files)

getFilesOfDirs(mypath, dirs)




# level 1




from os import listdir, makedirs
from os.path import isfile, join, dirname
import re

mypath = "C:/Users/rathomoh/temp/site"
files = [f for f in listdir(mypath) if isfile(join(mypath, f))]
dirs = [f for f in listdir(mypath) if not isfile(join(mypath, f))]

print(files)
print(dirs)


redirectPageTemplate = open(mypath + '/' + "templateSitemap.html", 'r').read()

def processFiles(currentPath , inputFiles):

    for file in inputFiles:
        with open(currentPath + '/' + file, 'r') as content_file:
            if not content_file.name.endswith('html'):
                continue
            try:
                content = content_file.read()
                pattern = 'href=[\'"]?([^\'" >]+)'
                ngUrlMatches = re.findall(pattern, content)

                for ngUrl in ngUrlMatches:
                    print(ngUrl)
                    if ngUrl.startswith('http'):
                        continue
                    outTemplate = redirectPageTemplate % (ngUrl, ngUrl)
                    # print(outTemplate)
                    print("--------------------------------")
                    fileName = mypath + '/nav/' + ngUrl.replace('#', '/').replace('//','/') + '.html'
                    makedirs(dirname(fileName), exist_ok=True)
                    with open(fileName, "w") as file:
                        file.write(outTemplate)
                        file.close()

            except Exception as e:
                print(e)


def getFilesOfDirs(currentDir, inputDirs):

    for dir in inputDirs:
        if dir == 'nav':
            continue
        files = [f for f in listdir(currentDir + '/' + dir) if isfile(join(currentDir + '/' + dir, f))]
        processFiles(currentDir + '/' + dir, files)
        # getFilesOfDirs()

processFiles(mypath, files)

getFilesOfDirs(mypath, dirs)




# level 1






================================

from os import listdir, makedirs
from os.path import isfile, join, dirname
import re

mypath = "C:/Users/rathomoh/temp/site"
files = [f for f in listdir(mypath) if isfile(join(mypath, f))]
dirs = [f for f in listdir(mypath) if not isfile(join(mypath, f))]

print(files)
print(dirs)


redirectPageTemplate = open(mypath + '/' + "templateSitemap.html", 'r').read()

def processFiles(currentPath , inputFiles):

    for file in inputFiles:
        with open(currentPath + '/' + file, 'r') as content_file:
            if not content_file.name.endswith('html'):
                continue
            try:
                content = content_file.read()
                pattern = 'href=[\'"]?([^\'" >]+)'
                ngUrlMatches = re.findall(pattern, content)

                for ngUrl in ngUrlMatches:
                    print(ngUrl)
                    if ngUrl.startswith('http') or '.' in  ngUrl:
                        continue
                    outTemplate = redirectPageTemplate % (ngUrl, ngUrl)
                    # print(outTemplate)
                    print("--------------------------------")
                    fileName = mypath + '/nav/' + ngUrl.replace('#', '/').replace('//','/') + '.html'
                    makedirs(dirname(fileName), exist_ok=True)
                    with open(fileName, "w") as file:
                        file.write(outTemplate)
                        file.close()

            except Exception as e:
                print(e)


def getFilesOfDirs(currentDir, inputDirs):

    for dir in inputDirs:
        if dir == 'nav':
            continue
        files = [f for f in listdir(currentDir + '/' + dir) if isfile(join(currentDir + '/' + dir, f))]
        processFiles(currentDir + '/' + dir, files)
        # getFilesOfDirs()

processFiles(mypath, files)

getFilesOfDirs(mypath, dirs)




# level 1





 
